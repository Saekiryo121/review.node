<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <title>Reviews</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f7f7f7;
            }

            #container {
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
                background-color: #fff;
                box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            }

            h1 {
                text-align: center;
                color: #0070c9;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }

            th,
            td {
                border: 1px solid #dddddd;
                text-align: left;
                padding: 10px;
            }

            th {
                background-color: #f2f2f2;
            }

            tr:nth-child(even) {
                background-color: #f9f9f9;
            }

            a {
                text-decoration: none;
                color: #0070c9;
            }

            .filter-container {
                text-align: center;
                margin-top: 20px;
            }

            #sortSelect,
            #ratingFilter {
                font-size: 16px;
                margin-left: 10px;
            }

            #clickButton {
                padding: 5px 15px;
                background-color: #0070c9;
                color: #fff;
                border: none;
                cursor: pointer;
                font-size: 12px;
                margin-left: 10px;
            }
        </style>
    </head>
    <body>
        <div id="container">
            <h1>Reviews</h1>
            <div id="form-container">
                <h2>新しいレビューを追加</h2>
                <form id="reviewForm">
                    <label for="name">ユーザー名:</label>
                    <input type="text" id="name" name="name" required>
                    <label for="age">年齢:</label>
                    <input type="number" id="age" name="age" required>
                    <label for="rating">評価:</label>
                    <select id="rating" name="rating" required>
                        <option value="1">★</option>
                        <option value="2">★★</option>
                        <option value="3">★★★</option>
                        <option value="4">★★★★</option>
                        <option value="5">★★★★★</option>
                    </select>
                    <label for="review">レビュー内容:</label>
                    <textarea id="review" name="review" required></textarea>
                    <button type="button" onclick="addReview()">レビューを追加</button>
                </form>
            </div>
            <div class="filter-container">
                <label for="sortSelect">評価:</label>
                <select id="sortSelect">
                    <option value="asc">低い順</option>
                    <option value="desc">高い順</option>
                </select>
                <label for="ratingFilter">絞り込み:</label>
                <select id="ratingFilter">
                    <option value="all">すべて</option>
                    <option value="1">★</option>
                    <option value="2">★★</option>
                    <option value="3">★★★</option>
                    <option value="4">★★★★</option>
                    <option value="5">★★★★★</option>
                </select>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>ユーザー</th>
                        <th>年齢</th>
                        <th>評価</th>
                        <th>レビュー</th>
                    </tr>
                </thead>
                <tbody>
                    <% personas.forEach(function(persona) { %>
                        <tr class="persona-row" data-persona-id="<%= persona.id %>" data-rating="<%= persona.rating %>">
                            <td>
                                <%= persona.name %>
                            </td>
                            <td>
                                <%= persona.age %>歳
                            </td>
                            <td>
                                <%= persona.rating %>
                            </td>
                            <td>
                                <%= persona.review %>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
            <div id="statistics">
                <h2>年代別統計情報</h2>
                <ul id="ageStatistics"></ul>
            </div>
        </div>
        <script type="text/javascript">
            let personas = [];
            personas = JSON.parse(decodeURIComponent('<%- encodeURIComponent(JSON.stringify(personas)) %>'));

            console.log('test')
            function convertStarsToNumber(stars) {
                if (!stars) {
                    return 0;
                }
                let starCount = stars.match(/★/g);
                return starCount ? starCount.length : 0;
            }

            const sortSelect = document.getElementById('sortSelect');
            sortSelect.addEventListener('change', sortData);

            const ratingFilterSelect = document.getElementById('ratingFilter');
            ratingFilterSelect.addEventListener('change', sortData);

            function sortData() {
                const sortDirection = sortSelect.value;
                const ratingFilter = ratingFilterSelect.value;
                const rows = Array.from(document.querySelectorAll('.persona-row'));

                console.log('Sort Direction:', sortDirection);
                console.log('Rating Filter:', ratingFilter);

                const ratingStatistics = {
                    1: { '10代': 0, '20代': 0, '30代': 0, '40代': 0, '50代以上': 0 },
                    2: { '10代': 0, '20代': 0, '30代': 0, '40代': 0, '50代以上': 0 },
                    3: { '10代': 0, '20代': 0, '30代': 0, '40代': 0, '50代以上': 0 },
                    4: { '10代': 0, '20代': 0, '30代': 0, '40代': 0, '50代以上': 0 },
                    5: { '10代': 0, '20代': 0, '30代': 0, '40代': 0, '50代以上': 0 },
                };

                rows.sort((a, b) => {
                    const ratingA = convertStarsToNumber(a.getAttribute('data-rating'));
                    const ratingB = convertStarsToNumber(b.getAttribute('data-rating'));

                    console.log('Rating A:', ratingA);
                    console.log('Rating B:', ratingB);

                    if (typeof ratingA !== 'undefined' && typeof ratingB !== 'undefined') {
                        if (sortDirection === 'asc') {
                            return ratingA - ratingB;
                        } else {
                            return ratingB - ratingA;
                        }
                    } else {
                        return 0;
                    }
                });

                const tbody = document.querySelector('tbody');
                tbody.innerHTML = '';

                rows.forEach((row) => {
                    tbody.appendChild(row);
                });

                rows.forEach((row) => {
                    const rowRating = convertStarsToNumber(row.getAttribute('data-rating'));
                    const ageGroup = getAgeGroup(row);

                    if ((ratingFilter === 'all' || rowRating == ratingFilter)) {
                        ratingStatistics[rowRating][ageGroup]++;
                    }

                    if (ratingFilter === 'all' || rowRating == ratingFilter) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                updateStatistics(ratingStatistics, ratingFilter);
            }

            function updateStatistics(ratingStatistics, currentFilter) {
                const ageStatisticsList = document.getElementById('ageStatistics');
                ageStatisticsList.innerHTML = '';

                for (const [rating, ageGroups] of Object.entries(ratingStatistics)) {
                    const listItem = document.createElement('li');
                    listItem.textContent = `★${rating}: `;

                    if (currentFilter === 'all' || rating == currentFilter) {
                        for (const [ageGroup, count] of Object.entries(ageGroups)) {
                            listItem.textContent += `${ageGroup}(${count}人) `;
                        }
                    }

                    ageStatisticsList.appendChild(listItem);
                }
            }

            function getAgeGroup(row) {
                const ageText = row.querySelector('td:nth-child(2)').textContent;
                const age = parseInt(ageText);

                if (age >= 10 && age < 20) {
                    return '10代';
                } else if (age < 30) {
                    return '20代';
                } else if (age < 40) {
                    return '30代';
                } else if (age < 50) {
                    return '40代';
                } else {
                    return '50代以上';
                }
            }

            function addReview() {
                const name = document.getElementById('name').value;
                const age = document.getElementById('age').value;
                const rating = document.getElementById('rating').value;
                const review = document.getElementById('review').value;

                console.log("Form data:", { name, age, rating, review });

                if (!name || !age || !rating || !review) {
                    alert('全ての項目を入力してください。');
                    return;
                }

                const formData = {
                    name: name,
                    age: age,
                    rating: rating,
                    review: review
                };

                console.log("FormData:", formData);

                fetch('/add-review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Success:', data);
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
            }
        </script>
    </body>
</html>
